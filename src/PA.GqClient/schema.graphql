schema {
  query: RequestQueryProvider
}

type RequestQueryProvider {
  requests(where: RequestFilterInput order: [RequestSortInput!]): [Request!]!
}

input RequestFilterInput {
  and: [RequestFilterInput!]
  or: [RequestFilterInput!]
  id: UuidOperationFilterInput
  requestedAt: DateTimeOperationFilterInput
  carModel: StringOperationFilterInput
  phone: StringOperationFilterInput
  description: StringOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
}

input RequestSortInput {
  id: SortEnumType
  requestedAt: SortEnumType
  carModel: SortEnumType
  phone: SortEnumType
  description: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

enum SortEnumType {
  ASC
  DESC
}

scalar UUID

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

type Request {
  id: UUID!
  requestedAt: DateTime!
  carModel: String!
  phone: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime
}